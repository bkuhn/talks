% Fork and Ignore: Fighting a GPL Violation By Coding Instead
% Bradley M. Kuhn
% Friday 22 August 2014

# GPL Violations Differ

+ Most of my talks historically have focused on embedded Linux-based GPL violations.
      + These are the most prevalent &amp; insidious.

+ However, GPL violations come in all shapes and sizes.

+ This is the story of a different sort of violation &hellip;
      + &hellip;  which allowed for a different sort of resolution.

# What's a GPL Violation?

+ This point may be too remedial for some of you.
     + If so, take a 2 minute email break.

+ GPL (both v2 and v3) require:
     + The whole work licensed under GPL.
     + Complete, Corresponding Source (CCS) of that work provided, under GPL.

+ I could give a whole talk on any of these topics:
     + What constitutes the &ldquo;whole work&rdquo;.
     + CCS requirements of GPL.

+ If you're new to GPL enforcement, just assume for this talk:
     + There are requirements on the forms of source-code disclosures. 
     + Everyone has an opinion on the &ldquo;whole/combined work&rdquo;
       question &hellip;
     + &hellip; but there is limited statutory guidance or Court precedent on the topic.


# Fundamental Assumptions

+ Generally speaking, everyone assumes:
     + proprietary software is more lucrative than Free Software.

+ The veracity of this claim is immaterial.
     + only the perception that it's true matters.

+ Companies therefore try to keep as much proprietary as they can.

# Fundamental Assumptions

+ Most developers, left to their own devices, share their code.

+ They tend to share their code if it's convenient.
     + &amp; even sometimes when it's not so convenient.

+ That's not to say most developers are software freedom zealots like me.

+ Rather, they err on the side of code-sharing.
     + In current times, that means developers  by default release code early
       and often under a Free Software license.

+ Thus, under these assumptions, so begins our story &hellip;


# A Developer Releases a Codebase

+ The story starts like most Free Software stories:
     + In 2010-10, a developer saw some useful proprietary software &hellip;
     + &hellip; didn't like the existing Free Software alternatives &hellip;
     + &hellip; and started writing one.

+ Specifically:
     + GitHub was a proprietary solution &amp; only supports Git.
     + Phabricator existed, but was written in PHP &amp; was
       Facebook-controlled.
     + GitLab didn't exist yet (doesn't  support       Mercurial.

+ Thus, [hg-app is announced](http://markmail.org/message/dx2pwuvt2l7u4tpn) on
  2010-06-03 under an [MIT-permissive license](https://kallithea-scm.org/repos/kallithea/files/bad9ccac26b7f84d8b7c65098ccfd6cd1903d4fe/LICENSE) on Mercurial's mailing list.

# There's Always A Flame War.

+ A debate erupts about GPL compatible licensing.

+ hg-app incorporates code from Mercurial:
      + Thus, in the view of most people, hg-app is based on Mercurial (in
        the copyright &amp; GPL sense).

+ Some point out that [MIT-permissive license is GPL-compatible](http://www.gnu.org/licenses/license-list.html#X11License).

+ The developer decides to avoid confusion and [relicenses hg-app under GPL](http://markmail.org/message/bds5x3ebnryzypkc).

# &hellip; &amp; the Community Goes On.

+ The project is renamed to [RhodeCode](http://markmail.org/message/qg545yaqqbbh3xxy).

+ Developers from Mercurial community begin contributing under GPL.

+ Independent contracts for software improvement are available for some.

+ All is well as a traditional Free Software community, until &hellip;

# Altering The Deal

+ RhodeCode's primary author forms a company, RhodeCode GmbH (The Company).

+ The Company announces future versions of RhodeCode won't be GPL'd.
      + adds a &ldquo;20 user max&rdquo; code.

+ Community backlash, and threats from all sides.
      + Author of the patch that removes the 20 user max is attacked.

+ Conservancy is contacted since Mercurial is a member project.
      + &amp; RhodeCode's codebase is based on GPL'd Mercurial code.

# Conservancy as Mediator

+ Some Mercurial developers and other community members seek aggressive enforcement action.

+ Conservancy seeks calm conversation with the Company.

+ The Company makes it clear that they believe it's 100% their copyright.

+ Situation quickly becomes a stand-off. 

# Of Course, GPL Is Irrevocable!

+ Of course, old code cannot be un-GPL'd.
      + AFAIK, no one has legitimately disputed that.

+ The question is with regard to future copyrights generated by the Company:
      + Can they relicense their *future* copyrighted works under non-GPL
        terms?

+ It's complicated:

<hr/>
>  All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met.
<span class="fitonslide">
<p align=right> GPLv3&sect;2&para;1
 &mdash; 
</p>
</span>

# A &ldquo;based on&rdquo; the earlier work

+ This codebase is, in Conservancy's view, GPL'd:
     + first, it's based Mercurial.
     + second, some third-party authors contributed patches under GPL.

+ The Company just doesn't agree.

+ Friendly negotiations to reach a fully GPL'd version going further failed.

+ So what are the options?

# How This Differs from Other Violations

+ Many GPL enforcement efforts reach the point of fundamental legal
  disagreement about the requirements of GPL.

+ In most cases, the stand-off is a true stand-off:
     + Free Software community doesn't have necessary CCS for the product.
     + A lawsuit eventually becomes only remaining way to compel CCS release.

+ But we don't have a mundane violation here.

# Early Friendliness Yields Better Options

+ Ultimately, the Company was, at one point, a good actor:
     + They shared kindly their software under the irrevocable GPL.

+ That code release remains GPL'd and useful.

+ In the worst case, forking at that point is an option.
     + &amp; avoids conflict.

# Avoiding Conflict

+ Conservancy has done GPL litigation before.

+ The reason a lawsuit is the last resort: it takes far too long.

+ When licensing of the primary codebase remains uncertain during the case:
     + you've effectively repeated USL v. BSDi, and tied your codebase up in
       court for years.

+ Conservancy had better options here, thanks to earlier GPL release &hellip;
     + &hellip; plus partial release of more recent code under GPL.
 
# A Complex License

+ The Company's final text of [their license](https://rhodecode.com/licenses)
  is clearly ambiguous (or worse):

+ GPLv3, in fact, contemplated this problem:

<hr/>

> RhodeCode system is split-licensed and comprised of two parts:

> (1) The Python code and integrated HTML are licensed under the GPLv3 license as is RhodeCode itself. ...

> (2) All other parts of RhodeCode including, but not limited to, CSS code, images, and design are licensed according to the license purchased. These licenses are displayed here on this page:

# Invalid Additional Term?

>  All other non-permissive additional terms are considered "further restrictions" within the meaning of section 10.  If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term.  If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.
<span class="fitonslide">
<p align=right>  GPLv3&sect;7&para;4
 &mdash; 
</p>
</span>

# Remember: No Conflict!

+ Obviously, the Company would fight Conservancy's GPLv3&sect;7&para;4 claim.

+ Instead, to make peace, Conservancy reads the license more conservatively
  than necessary.

+ Thus begins: the hard work of a four step process:
      + Find the last known version of the codebase without the new (invalid) text added.
      + Extract useful patches of only Python code and HTML files from
        post-license-change versions.
      + Rebrand to a new name.
      + Ensure &ldquo;beyond reproach&rdquo; compliance.

<hr/>

> RhodeCode system is split-licensed and comprised of two parts:

> (1) The Python code and integrated HTML are licensed under the GPLv3 license as is RhodeCode itself. ...

> (2) All other parts of RhodeCode including, but not limited to, CSS code, images, and design are licensed according to the license purchased.


# First Step: Last Known GPLv3'd version

+ First step was easier than it looked.

+ Public development had stopped completely when the controversy started:
       + i.e., the project became &ldquo;throw it over the wall&rdquo;

+ The last released Mercurial repository was basically what we sought.

# Second Step: Extract New Python &amp; HTML

+ Even with hyper-conservative reading, Python code &amp; HTML are clearly GPLv3'd.

+ Careful extraction was required to include only those changes.

+ We wrote a shell script to rerun mercurial commands and verified resulting
repositories included only new changes to Python &amp; HTML files.


# Third Step: Rename

+ We had no interest in using the (potentially trademarked) brand name, &ldquo;RhodeCode&rdquo;
       + &hellip; other than in those ways third parties are already
         permitted to do so.

+ Problem: rhodecode_ was commonly used throughout the code.
       + Again: hyper-conservative approach, remove all those.

+ This isn't just the obvious sed/perl scripts:
       + You have to make sure your replacements generate working code!
