% Fork and Ignore: Fighting a GPL Violation By Coding Instead
% Bradley M. Kuhn
% Friday 22 August 2014

# GPL Violations Differ

+ Most of my talks historically have focused on embedded Linux-based GPL violations.
      + These are the most prevalent &amp; insidious.

+ However, GPL violations come in all shapes and sizes.

+ This is the story of a different sort of violation &hellip;
      + &hellip;  which allowed for a different sort of resolution.

# What's a GPL Violation?

+ This point may be too remedial for some of you.
     + If so, take a 2 minute email break.

+ GPL (both v2 and v3) require:
     + The whole work licensed under GPL.
     + Complete, Corresponding Source (CCS) of that work provided, under GPL.

+ I could give a whole talk on any of these topics:
     + What constitutes the &ldquo;whole work&rdquo;.
     + CCS requirements of GPL.

+ If you're new to GPL enforcement, just assume for this talk:
     + There are requirements on the forms of source-code disclosures. 
     + Everyone has an opinion on the &ldquo;whole/combined work&rdquo;
       question &hellip;
     + &hellip; but there is limited statutory guidance or Court precedent on the topic.


# Fundamental Assumptions

+ Generally speaking, everyone assumes:
     + proprietary software is more lucrative than Free Software.

+ The veracity of this claim is immaterial.
     + only the perception that it's true matters.

+ Companies therefore try to keep as much proprietary as they can.

# Fundamental Assumptions

+ Most developers, left to their own devices, share their code.

+ They tend to share their code if it's convenient.
     + &amp; even sometimes when it's not so convenient.

+ That's not to say most developers are software freedom zealots like me.

+ Rather, they err on the side of code-sharing.
     + In current times, that means developers  by default release code early
       and often under a Free Software license.

+ Thus, under these assumptions, so begins our story &hellip;


# A Developer Releases a Codebase

+ The story starts like most Free Software stories:
     + In 2010-10, a developer saw some useful proprietary software &hellip;
     + &hellip; didn't like the existing Free Software alternatives &hellip;
     + &hellip; and started writing one.

+ Specifically:
     + GitHub was a proprietary solution &amp; only supports Git.
     + Phabricator existed, but was written in PHP &amp; was
       Facebook-controlled.
     + GitLab didn't exist yet (doesn't  support       Mercurial.

+ Thus, [hg-app is announced](http://markmail.org/message/dx2pwuvt2l7u4tpn) on
  2010-06-03 under an [MIT-permissive license](https://kallithea-scm.org/repos/kallithea/files/bad9ccac26b7f84d8b7c65098ccfd6cd1903d4fe/LICENSE) on Mercurial's mailing list.

# There's Always A Flame War.

+ A debate erupts about GPL compatible licensing.

+ hg-app incorporates code from Mercurial:
      + Thus, in the view of most people, hg-app is based on Mercurial (in
        the copyright &amp; GPL sense).

+ Some point out that [MIT-permissive license is GPL-compatible](http://www.gnu.org/licenses/license-list.html#X11License).

+ The developer decides to avoid confusion and [relicenses hg-app under GPL](http://markmail.org/message/bds5x3ebnryzypkc).

# &hellip; &amp; the Community Goes On.

+ The project is renamed to [RhodeCode](http://markmail.org/message/qg545yaqqbbh3xxy).

+ Developers from Mercurial community begin contributing under GPL.

+ Independent contracts for software improvement are available for some.

+ All is well as a traditional Free Software community, until &hellip;

# Altering The Deal

+ RhodeCode's primary author forms a company, RhodeCode GmbH (The Company).

+ The Company announces future versions of RhodeCode won't be GPL'd.
      + adds a &ldquo;20 user max&rdquo; code.

+ Community backlash, and threats from all sides.
      + Author of the patch that removes the 20 user max is attacked.

+ Conservancy is contacted since Mercurial is a member project.
      + &amp; RhodeCode's codebase is based on GPL'd Mercurial code.

# Conservancy as Mediator

+ Some Mercurial developers and other community members seek aggressive enforcement action.

+ Conservancy seeks calm conversation with the Company.

+ The Company makes it clear that they believe it's 100% their copyright.

+ Situation quickly becomes a stand-off. 

# Of Course, GPL Is Irrevocable!

+ Of course, old code cannot be un-GPL'd.
      + AFAIK, no one has legitimately disputed that.

+ The question is with regard to future copyrights generated by the Company:
      + Can they relicense their *future* copyrighted works under non-GPL
        terms?

+ It's complicated:

<hr/>
>  All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met.
<span class="fitonslide">
<p align=right>  &mdash;  GPLv3&sect;2&para;1

</p>
</span>

# &ldquo;Based on&rdquo; the earlier work

+ This codebase is, in Conservancy's view, GPL'd:
     + first, it's based Mercurial.
     + second, some third-party authors contributed patches under GPL.

+ The Company just doesn't agree.

+ Friendly negotiations to reach a fully GPL'd version going further failed.

+ So what are the options?

# How This Differs from Other Violations

+ Many GPL enforcement efforts reach the point of fundamental legal
  disagreement about the requirements of GPL.

+ In most cases, the stand-off is a true stand-off:
     + Free Software community doesn't have necessary CCS for the product.
     + A lawsuit eventually becomes only remaining way to compel CCS release.

+ But we don't have a mundane violation here.

# Early Friendliness Yields Better Options

+ Ultimately, the Company was, at one point, a good actor:
     + They shared kindly their software under the irrevocable GPL.

+ That code release remains GPL'd and useful.

+ In the worst case, forking at that point is an option.
     + &amp; avoids conflict.

# Avoiding Conflict

+ Conservancy has done GPL litigation before.

+ The reason a lawsuit is the last resort: it takes far too long.

+ When licensing of the primary codebase remains uncertain during the case:
     + you've effectively repeated USL v. BSDi, and tied your codebase up in
       court for years.

+ Conservancy had better options here, thanks to earlier GPL release &hellip;
     + &hellip; plus partial release of more recent code under GPL.
 
# A Complex License

+ The Company's final text of [their license](https://rhodecode.com/licenses)
  is clearly ambiguous (or worse):

+ GPLv3, in fact, contemplated this problem:

<hr/>

> RhodeCode system is split-licensed and comprised of two parts:

> (1) The Python code and integrated HTML are licensed under the GPLv3 license as is RhodeCode itself. ...

> (2) All other parts of RhodeCode including, but not limited to, CSS code, images, and design are licensed according to the license purchased. These licenses are displayed here on this page:

# Invalid Additional Term?

<br/>

>  All other non-permissive additional terms are considered "further restrictions" within the meaning of section 10.  If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term.  If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.
<span class="fitonslide">
<p align=right>&mdash;  GPLv3&sect;7&para;4</p>
</span>

# Remember: No Conflict!

+ Obviously, the Company would fight Conservancy's GPLv3&sect;7&para;4 claim.

+ Instead, to make peace, Conservancy reads the license more conservatively
  than necessary.

<hr/>

> RhodeCode system is split-licensed and comprised of two parts:

> (1) The Python code and integrated HTML are licensed under the GPLv3 license as is RhodeCode itself. ...

> (2) All other parts of RhodeCode including, but not limited to, CSS code, images, and design are licensed according to the license purchased.

# Making the Fork

+ Thus begins: the hard work of a four step process:
      + Find the last known version of the codebase without the new (invalid) text added.
      + Extract useful patches of only Python code and HTML files from
        post-license-change versions.
      + Rebrand to a new name.
      + Ensure &ldquo;beyond reproach&rdquo; compliance.


# Step 0: Last Known GPLv3'd version

+ First step was easier than it looked.

+ Public development had stopped completely when the controversy started:
       + i.e., the project became &ldquo;throw it over the wall&rdquo;

+ The last released Mercurial repository was basically what we sought.

# Step 1: Extract New Python &amp; HTML

+ Even with hyper-conservative reading, Python code &amp; HTML are clearly GPLv3'd.

+ Careful extraction was required to include only those changes.

+ We wrote a shell script to rerun mercurial commands and verified resulting
  repositories included only new changes to Python &amp; HTML files.

# Step 3: Rename

+ We had no interest in using the (potentially trademarked) brand name, &ldquo;RhodeCode&rdquo;
       + &hellip; other than in those ways third parties are already
         permitted to do so.

+ Problem: rhodecode_ was commonly used throughout the code.
       + Again: hyper-conservative approach, remove all those.

+ This isn't just the obvious sed/perl scripts:
       + You have to make sure your replacements generate working code!

#  Step 4: Beyond Reproach

+ Even if upstream violated the GPLv3, it doesn't mean we have permission to
  do so.

+ Therefore, getting CCS right is a complicated issue.

+ But why?

# GPL'd Javascript

+ Most people don't realize how similar Javascript programs are to mundane
  software distribution:
      + You publish a .js file on a URL.
      + Your users download it with an HTTP request.
      + You've *distributed* (in GPLv3 terms, *conveyed*) the software to
        them.

+ Every GPL requirement, including those relating to CCS provisioning *apply*
  fully for most Javascript in a GPL'd system!

# So, What Do I find? 

    $ hg clone -q  https://kallithea-scm.org/repos/kallithea/
    $ cd kallithea; hg update -C ffd45b185016
    $ ls -1 rhodeode/public/js/
    codemirror.js
    codemirror_loadmode.js
    excanvas.min.js
    qgraph.js
    jquery.1.10.1.min.js
    mergerly.js
    mode
    native.history.js
    pyroutes_map.js
    rhodecode.js
    yui.2.9.js
    yui.flot.js

# Verify Upstream licensed this code

     changeset:   4120:bb9ef0638069
     branch:      rhodecode-2.2.5-gpl
     user:        Bradley M. Kuhn <bkuhn@sfconservancy.org>
     date:        Fri May 16 15:54:24 2014 -0400
     description:
       Update CodeMirror CSS and Javascript files to version 3.15, under MIT-permissive license.

       These files are exactly as they appear the upstream release 3.15 of
       Codemirror, which was released under an MIT-permissive license.  To extract
       these files, I did the following:

       I downloaded the following file:
            http://codemirror.net/codemirror-3.15.zip
       with sha256sum of:
       $ sha256sum codemirror-3.15.zip
       8cf3a512899852fd4e3833423ea98d34918cbf7ee0e4e0b13f8b5e7b083f21b9  codemirror-3.15.zip

       And extracted from it the Javascript and CSS files herein committed, which
       are licensed under the MIT-permissive license, placing them into their
       locations in: rhodecode/public/{css,js}/

       Using the procedure above, the only difference found between these files in
       RhodeCode 2.2.5 release and herein were a few comments and whitespace.

       Note that the file .../public/js/mode/meta_ext.js does *not* appear to be
       part of CodeMirror and therefore is not included in this commit.


# Add Correct LICENSE notices

From LICENSE.md:

      Codemirror
      ----------

      Kallithea incorporates parts of the Javascript system called
      [Codemirror](http://codemirror.net/), which is primarily:

      Copyright &copy; 2013 by Marijn Haverbeke <marijnh@gmail.com>

      and licensed under the MIT-permissive license, which is
      [included in this distribution](MIT-Permissive-License.txt).

      Additional files from upstream Codemirror are copyrighted by various authors
      and licensed under other permissive licenses.  The sub-directories under
      [.../public/js/mode/](kallithea/public/js/mode) include the copyright and
      license notice and information as they appeared in Codemirror's upstream
      release.

# Most Javascript is Object Code
   + That was the easy part.
   + The hard part was the minified stuff:
   + as we had to find the appropriate CCS, and restart from scratch.
   + Consider: yui.2.9.js


   
***

<span class="fitonslide">
> "Object code" means any non-source form of a work.
<p align=right>  &mdash; GPLv3&sect;1&para;1
</p>

***

> Object code is not restricted to a narrow technical meaning and is understood broadly to include any form of the work other than the preferred form for making modifications to it.  **Object code** therefore **includes** any kind of transformed version of source code, such as bytecode or **minified Javascript**.
<p align=right>
&mdash; [FSF's GPLv3 First Rationale Document, 2006-01-16](http://gplv3.fsf.org/gpl-rationale-2006-01-16.tex/view) (emphasis mine)
</p>

# Why You?!? I (asked)!

+ YUI is Yahoo's Javascript interface library.
+ Version 2.9 is deprecated.
+ Minified versions can be found all over the Internet &hellip;
     + &hellip; which isn't a violation &hellip;
     + &hellip; since YUI is 3-Clause BSD &hellip;
     + &hellip; but it's part of the CCS &hellip;
     + &hellip; of a lager GPLv3'd work.

+ So, we just learned how to rebuild our own, and made our own Corresponding Source.

***
<span class="fitonslide">
> The "Corresponding Source" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities.
<p align=right>
&mdash; GPLv3&sect;1
</p>

<br/>

> Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge.  You need not require recipients to copy the Corresponding Source along with the object code.
<p align=right>
&mdash; GPLv3&sect;6(c)
</p>
</span>

#

<span class="fitonslide">
Kallithea incorporates parts of the Javascript system called
[YUI 2 — Yahoo! User Interface Library](http://yui.github.io/yui2/docs/yui_2.9.0
_full/),
which is made available under the [BSD License](http://yuilibrary.com/license/):

Copyright &copy; 2013 Yahoo! Inc. All rights reserved.

Redistribution and use of this software in source and binary forms, with or
without modification, are permitted provided that the following conditions are
met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Yahoo! Inc. nor the names of YUI's contributors may be
  used to endorse or promote products derived from this software without
  specific prior written permission of Yahoo! Inc.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Kallithea includes a minified version of YUI 2.9. To build yui.2.9.js:

    git clone https://github.com/yui/builder
    git clone https://github.com/yui/yui2
    cd yui2/
    git checkout hudson-yui2-2800
    ln -sf JumpToPageDropDown.js src/paginator/js/JumpToPageDropdown.js # work around inconsistent casing
    rm -f tmp.js
    for m in yahoo event dom connection animation dragdrop element datasource autocomplete container event-delegate json datatable paginator; do
      rm -f build/\$m/\$m.js
      ( cd src/\$m && ant build deploybuild ) && sed -e 's,@VERSION@,2.9.0,g' -e 's,@BUILD@,2800,g' build/\$m/\$m.js >> tmp.js
    done
    java -jar ../builder/componentbuild/lib/yuicompressor/yuicompressor-2.4.4.jar tmp.js -o yui.2.9.js

In compliance with GPLv3 the Corresponding Source for this Object Code is made
available on
[https://kallithea-scm.org/repos/mirror](https://kallithea-scm.org/repos/mirror).
</span>

# Lessons for New Communities

+ For a web application, *don't* just copy Javascript (even Free Software
  stuff) into your repository.

+ When you start contributing to a project, *ask* who holds domain name
  &amp; trademark for the project.
       + If the answer is one person or I don't know, find a non-profit like
         Conservancy to help *right away*.

+ Keep your own copyrights &amp; make it clear you expect the license to be
  upheld.
       + &amp; will do so yourself if needed.
